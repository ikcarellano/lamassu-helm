apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-service-account
  namespace: {{.Release.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: job-role
  namespace: {{.Release.Namespace}}
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: job-rolebinding
  namespace: {{.Release.Namespace}} 
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: job-role 
subjects:
- namespace: {{.Release.Namespace}} 
  kind: ServiceAccount
  name: job-service-account
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: secret-create-cm
  namespace: {{.Release.Namespace}}
data:
  secret-create-script.sh: |
    apt-get update
    apt-get install curl jq -y

    # Check if Vault is healthy

    echo "Waiting vault to launch on 8200..."
    until $(curl -s -k --output /dev/null --silent --head --fail https://vault:8200); do
      printf '.'
      sleep 1
    done
    echo "Vault launched"
    sleep 30
    
    # Check if Vault is initialized
    echo "Check if Vault is initialized..."
    isVaultInitialized=$(curl -s -k https://vault:8200/v1/sys/init | jq -r .initialized)
    echo $isVaultInitialized

    if [ "$isVaultInitialized" == "true" ]; then 
      echo "Vault already initialized. Existing with succesfull code"
      exit 0
    fi

    echo "Vault is healthy but requires initizalization. Initialazing ...."

    vault_credentials_raw=$(curl -s --request POST --data '{"secret_shares": 10,"secret_threshold": 5}' -k https://vault:8200/v1/sys/init)
    echo $vault_credentials_raw

    # vault_credentials_base64=$(echo $vault_credentials_raw | base64 --wrap=0)
    # echo $vault_credentials_base64

    APISERVER=https://kubernetes.default.svc
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
    NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt

    echo "Before secret creation"

    UNSEAL_KEYS=$(echo $vault_credentials_raw | jq -r .keys)
    echo "$UNSEAL_KEYS"

    UNSEAL_KEYS_BASE64=$(echo $UNSEAL_KEYS | base64 --wrap=0)
    echo "$UNSEAL_KEYS_BASE64"

      curl -s --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" -X POST ${APISERVER}/api/v1/namespaces/{{.Release.Namespace}}/secrets \
      --data "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"name\":\"vault-credentials-file\"},\"type\":\"Opaque\",\"data\":{\"json-file.json\": \"$UNSEAL_KEYS_BASE64\"}}"   


    echo "Vault Credentials File persisted into kubernetes secret."
    echo "Provisioning vault: "

    echo "$vault_credentials_raw" | jq '.'
 
    VAULT_TOKEN=$(echo $vault_credentials_raw | jq -r .root_token)

    echo "Unsealing ............................."

    # Introduciendo keys para unseal
    curl -s --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[0])\" }"
    curl -s --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[1])\" }"
    curl -s --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[2])\" }"
    curl -s --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[3])\" }"
    curl -s --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[4])\" }"
   
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"type": "approle"}' -s "https://vault:8200/v1/sys/auth/approle"
    
    tee payload.json <<EOF
    {
      "type": "pki",
      "config": {
        "max_lease_ttl": "262800h"
      }
    } 
    EOF
    
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json -s "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA1-RSA4096"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json -s "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA2-RSA2048"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json -s "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA3-ECC384"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json -s "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA4-ECC256"
   
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json -s "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_internal/Lamassu-DMS-Enroller"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policy":"path \"sys/mounts/*\" {\n capabilities=[\"read\", \"create\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\npath \"sys/mounts\" {\n capabilities=[\"read\"]\n}\npath \"sys/policies/*\" {\n capabilities=[\"read\", \"create\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\npath \"pki/lamassu/dev*\" {\n capabilities=[\"read\", \"create\", \"update\", \"delete\", \"list\", \"sudo\"]\n}"}' -s "https://vault:8200/v1/sys/policy/lamassu-ca-policy"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policy":"path \"Lamassu-Root-CA1-RSA4096/cert/ca\" {\n capabilities=[\"read\"]\n}\npath \"Lamassu-Root-CA2-RSA2048/cert/ca\" {\n capabilities=[\"read\"]\n}\n path \"Lamassu-Root-CA3-ECC384/cert/ca\" {\n capabilities=[\"read\"]\n}\npath \"Lamassu-Root-CA4-ECC256/cert/ca\" {\n capabilities=[\"read\"]\n}"}' -s "https://vault:8200/v1/sys/policy/ocsp-policy"
    
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policies": "lamassu-ca-policy"}' -s "https://vault:8200/v1/auth/approle/role/lamassu-ca-role"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policies": "ocsp-policy"}' -s "https://vault:8200/v1/auth/approle/role/ocsp-role"

    tee enroller.json <<EOF
    {
      "allow_any_name": true,
      "ttl": "175200h",
      "max_ttl": "262800h",
      "key_type": "any"
    } 
    EOF
    
    tee internal.json <<EOF
    {
      "common_name": "LKS Next Root <CA_name>",
      "key_type": "rsa",
      "key_bits": "<key_bits>",
      "organization": "LKS Next, S. Coop",
      "country": "ES",
      "ttl": "262800h",
      "province": "Gipuzkoa",
      "locality": "Arrasate"
    } 
    EOF
    
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA1-RSA4096/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 1"' | jq '.key_bits="4096"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA1-RSA4096/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA2-RSA2048/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 2"' | jq '.key_bits="2048"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA2-RSA2048/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA3-ECC384/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 3"' | jq '.key_bits="384"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA3-ECC384/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA4-ECC256/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 4"' | jq '.key_bits="256"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json -s "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA4-ECC256/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json -s "https://vault:8200/v1/pki/lamassu/dev/_internal/Lamassu-DMS-Enroller/roles/enroller"
    cat internal.json | jq '.common_name="Lamassu DMS Enroller"' | jq '.key_bits="4096"' | jq '.organization="Lamassu PKI"' | jq '.country=""' | jq '.province=""' | jq '.locality=""' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json -s "https://vault:8200/v1/pki/lamassu/dev/_internal/Lamassu-DMS-Enroller/root/generate/internal"

    rm payload.json enroller.json internal.json internal_CA.json

    CA_VAULT_ROLEID=$(curl -s -k --header "X-Vault-Token: ${VAULT_TOKEN}" https://vault:8200/v1/auth/approle/role/lamassu-ca-role/role-id | jq -r .data.role_id | sed 's/\\n/\n/g' | sed -Ez '$ s/\n+$//' | base64)
    echo -e "\nEl valor de ROLEID es $CA_VAULT_ROLEID"

    CA_VAULT_SECRETID=$(curl -s -k --header "X-Vault-Token: ${VAULT_TOKEN}" --request POST https://vault:8200/v1/auth/approle/role/lamassu-ca-role/secret-id  | jq -r .data.secret_id | sed 's/\\n/\n/g' | sed -Ez '$ s/\n+$//' | base64)
    echo -e "\nEl valor de SECRETID $CA_VAULT_SECRETID"

    curl -s --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" -X POST ${APISERVER}/api/v1/namespaces/{{.Release.Namespace}}/secrets \
      --data "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"name\":\"lamassu-ca-vault-credentials\"},\"type\":\"Opaque\",\"data\":{\"role-id\":\"$CA_VAULT_ROLEID\", \"secret-id\":\"$CA_VAULT_SECRETID\"}}"

    echo -e "\nEl valor de VAULT_TOKEN es $VAULT_TOKEN"
    echo HASTA AQUI
---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-job
  namespace: {{.Release.Namespace}}
  labels:
    app: secret-job
spec:
  template:
    metadata:
      name: secret-job
      labels:
        app: secret-job
    spec:
      serviceAccountName: job-service-account
      containers:
        - name: secret-job
          image: ubuntu:20.04
          volumeMounts:
            - name: secret-create
              mountPath: /templates/init.sh
              subPath: secret-create-script.sh
          command: ["/bin/bash", "-c"]
          args: ["cp /templates/init.sh /init.sh && chmod +x /init.sh && bash /init.sh" ]
          
      restartPolicy: OnFailure
      volumes:
        - name: secret-create
          configMap:  
            name: secret-create-cm