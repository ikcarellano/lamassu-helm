kind: ConfigMap
apiVersion: v1
metadata:
  name: users-create-cm
  namespace: {{.Release.Namespace}}
data:
  users-create-script.sh: |
    # apt-get update
    # apt-get install curl jq -y

    # Check if Auth is healthy

    echo "Waiting Auth to launch on 8080..."
    until $(curl -s -o /dev/null -f http://auth:8080/auth/ -I | grep HTTP | awk '{print $2}'); do
      printf '.'
      sleep 1
    done
    sleep 60
    echo "Auth is launched"

    
    opt/jboss/keycloak/bin/kcadm.sh config credentials --server http://auth:8080/auth --realm master --user admin --password admin

    # Create enroller
    opt/jboss/keycloak/bin/kcadm.sh create users -s username=enroller -s enabled=true -r lamassu
    opt/jboss/keycloak/bin/kcadm.sh set-password -r lamassu --username=enroller --new-password enroller
    opt/jboss/keycloak/bin/kcadm.sh add-roles --uusername enroller --rolename admin -r lamassu

    # Create operator
    opt/jboss/keycloak/bin/kcadm.sh create users -s username=operator -s enabled=true -r lamassu
    opt/jboss/keycloak/bin/kcadm.sh set-password -r lamassu --username=operator --new-password operator

    # sleep 10000
---
apiVersion: batch/v1
kind: Job
metadata:
  name: users-job
  namespace: {{.Release.Namespace}}
  labels:
    app: users-job
spec:
  template:
    metadata:
      name: users-job
      labels:
        app: users-job
    spec:
      serviceAccountName: job-service-account
      containers:
        - name: users-job
          image: jboss/keycloak:13.0.0
          volumeMounts:
            - name: users-create
              mountPath: /templates/init.sh
              subPath: users-create-script.sh
          securityContext:
            runAsUser: 0
          command: ["/bin/bash", "-c"]
          args: ["cp /templates/init.sh /init.sh && chmod +x /init.sh && bash /init.sh" ]
      restartPolicy: OnFailure
      volumes:
        - name: users-create
          configMap:  
            name: users-create-cm