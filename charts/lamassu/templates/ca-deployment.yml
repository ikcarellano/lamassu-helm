apiVersion: apps/v1
kind: Deployment
metadata:  
  name: ca
  namespace: {{.Release.Namespace}}
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app: ca
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ca
  template:
    metadata:
      labels:
        app: ca
    spec:
      containers:
        - name: ca
          image: {{.Values.services.ca.image}}
          imagePullPolicy: Always
          tty: true         
          env:
            - name: SERVICE_NAME
              value: ca
            - name: DEBUG_MODE
              value: "{{.Values.debugMode}}"
            - name: PORT
              value: "8085"
            - name: PROTOCOL
              value: https
            - name: CERT_FILE
              value: /certs/tls.crt
            - name: KEY_FILE
              value: /certs/tls.key
            - name: MUTUAL_TLS_ENABLED
              value: "true"
            - name: MUTUAL_TLS_CLIENT_CA
              value: /certs/internal-ca.crt
            - name: AMQP_SERVER_USE_BASIC_AUTH
              value: "true"
            - name: AMQP_SERVER_USERNAME
              value: {{.Values.rabbitmq.auth.username}}
            - name: AMQP_SERVER_PASSWORD
              value: {{.Values.rabbitmq.auth.password}}
            - name: AMQP_SERVER_ENABLE_TLS
              value: "true"
            - name: AMQP_SERVER_HOST
              value: rabbitmq
            - name: AMQP_SERVER_PORT
              value: "5671"
            - name: AMQP_SERVER_CA_CERT
              value: /certs/internal-ca.crt
            - name: POSTGRES_HOSTNAME
              value: {{ .Values.postgres.hostname }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgres.port }}"
            - name: POSTGRES_DATABASE
              value: ca
            - name: POSTGRES_USERNAME
              value: {{ .Values.postgres.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgres.password }}
            - name: OCSP_URL
              value: https://{{.Values.domain}}/api/ocsp/
            {{ if eq .Values.services.ca.engine "vault"}}
            - name: VAULT_ADDRESS
              value: https://vault-active:8200
            - name: VAULT_ROLE_ID
              valueFrom:
                secretKeyRef:
                  name: vault-ca-credentials
                  key: role-id
            - name: VAULT_SECRET_ID
              valueFrom:
                secretKeyRef:
                  name: vault-ca-credentials
                  key: secret-id
            - name: VAULT_AUTO_UNSEAL_ENABLED
              value: "false"
            - name: VAULT_PKI_CA_PATH
              value: pki/lamassu/dev/
            - name: VAULT_CA
              value: /certs/vault.crt
            {{ end }}
            {{ if eq .Values.services.ca.engine "awsSecretManager" }}
            - name: AWS_DEFAULT_REGION
              value: {{.Values.services.ca.aws.region}}
            - name: AWS_ACCESS_KEY_ID
              value: {{.Values.services.ca.aws.accessKeyId}}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{.Values.services.ca.aws.secretAccessKey}}
            {{ end }}
            - name: ENGINE
              value: {{.Values.services.ca.engine}}
            - name: ABOUT_TO_EXPIRE_DAYS
              value: "{{.Values.services.ca.aboutToExpire}}"
            - name: PERIODIC_SCAN_ENABLED
              value: "{{.Values.services.ca.periodicScan.enabled}}"
            - name: PERIODIC_SCAN_CRON
              value: "{{.Values.services.ca.periodicScan.cron}}"
          volumeMounts:
            {{ if eq .Values.services.ca.engine "vault" }}
            - name: tls-certificates
              mountPath: /certs/vault.crt
              subPath: ca.crt
            {{ end }}
            - name: tls-certificates
              mountPath: /certs/tls.crt
              subPath: tls.crt
            - name: tls-certificates
              mountPath: /certs/tls.key
              subPath: tls.key
            - name: tls-certificates
              mountPath: /certs/internal-ca.crt
              subPath: ca.crt
          ports:
            - containerPort: 8085
      restartPolicy: Always
      volumes:
        - name: initcontainer-cmd
          configMap:  
            name: ca-initcontainer-cm
        - name: tls-certificates
          secret:
            secretName: ca-upstream-cert
