domain: dev.lamassu.io
debugMode: false
storageClassName: &storage-class-name "" # <----  Default Value

#Downstream TLS
tls:
  selfSigned: true
  secretName: ""
  duration: "2160h" #2160h == 90days

services:
  apiGateway:
    image: lamassuiot/lamassu-gateway-dev:latest
  keycloak:
    image: lamassuiot/lamassu-auth-dev:latest
    username: admin
    password: admin
  ui:
    image: lamassuiot/lamassu-ui-dev:latest
  ocsp:
    image: lamassuiot/lamassu-ocsp-dev:latest
  ca:
    image: lamassuiot/lamassu-ca-dev:latest
    aboutToExpire: 90
    periodicScan:
      enabled: true
      cron: "0 * * * *"
  deviceManager:
    image: lamassuiot/lamassu-device-manager-dev:latest
    minimumReenrollmentDays: 100
  dmsManager:
    image: lamassuiot/lamassu-dms-manager-dev:latest
  database:
    image: lamassuiot/lamassu-db:v1.0.12
    username: admin
    password: admin
  openPolicyAgent:
    image: openpolicyagent/opa:0.37.1-envoy
  cloudProxy:
    image: lamassuiot/lamassu-cloud-proxy-dev:latest
  rabbitmq:
    image: lamassuiot/lamassu-rabbitmq-dev:latest
  alerts:
    image: lamassuiot/lamassu-alerts-dev:latest
    smtp:
      from: ""
      insecure: false
      enable_ssl: true
      username: ""
      password: ""
      host: ""
      port: 25
  awsConnector:
    image: lamassuiot/lamassu-aws-connector-dev:latest
    enabled: false
    name: "AWS default connector"
    aws:
      accessKeyId: ""
      secretAccessKey: ""
      defaultRegion: ""
      sqs:
        inboundQueueName:  "lamassuResponse"
        outbountQueueName:  ""

simulationTools:
  enabled: false
  virtualDevice:
    image: lamassuiot/lamassuiot-virtual-device:2.0.0
  virtualDms:
    image: lamassuiot/lamassuiot-virtual-dms:2.0.0

##############################
# Subcharts values
##############################

rabbitmq:
  fullnameOverride: "rabbitmq"
  global:
    storageClass:  *storage-class-name
  podAnnotations:
    reloader.stakater.com/auto: "true"
  auth:
    username: "user"
    password: "user"
    tls:
      enabled: true
      existingSecret: rabbitmq-upstream-cert

postgresql-ha:
  fullnameOverride: "postgresql" #If not set, resources are created using Release.Name (referenced in .tpl  as "fullname"). Since it is not possilbe to use Release.Name in .Values.yml file, overwrite to avoid issues
  global:
    storageClass:  *storage-class-name
    postgresql:
      username: "admin"
      password: "admin"
      # database: ""
      repmgrUsername: "admin"
      repmgrPassword: "admin"
      # repmgrDatabase: ""
      existingSecret: ""
  postgresql:
    replicaCount: 3
    initdbScriptsCM: postgres-ha-init
    syncReplication: true

#https://developer.hashicorp.com/consul/docs/k8s/helm
consul:
  fullnameOverride: "consul" #If not set, resources are created using Release.Name (referenced in .tpl  as "fullname"). Since it is not possilbe to use Release.Name in .Values.yml file, overwrite to avoid issues
  global:
    datacenter: lamassu-k8s
    tls:
      enabled: true
      verify: false
      caCert: 
        secretName: ca-upstream-cert
  client:
    enabled: false
  server:
    serverCert:
      secretName: consul-upstream-cert
    affinity: "null"  #set to null to remove affinity rule. By default consul only deploys 1 service per node. See: https://developer.hashicorp.com/consul/docs/k8s/helm#v-server-affinity
    annotations: |
      "reloader.stakater.com/auto": "true"
    replicas: 3
    storageClassName: *storage-class-name
    extraConfig: |
      {
        "enable_agent_tls_for_checks": true
      }
      

#https://developer.hashicorp.com/vault/docs/platform/k8s/helm/configuration
vault:
  fullnameOverride: "vault" #If not set, resources are created using Release.Name (referenced in .tpl  as "fullname"). Since it is not possilbe to use Release.Name in .Values.yml file, overwrite to avoid issues
  global:
    tlsDisable: false
  server:
    authDelegator:
      enabled: false
    affinity: ""
    annotations:
      reloader.stakater.com/auto: "true"
    extraVolumes:
      - type: secret
        name: vault-upstream-cert
    ha:
      enabled: true
      replicas: 3
      apiAddr: https://127.0.0.1:8200
      config: |
        ui = true
        listener "tcp" {
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_cert_file = "/vault/userconfig/vault-upstream-cert/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-upstream-cert/tls.key"
          tls_client_ca_file = "/vault/userconfig/vault-upstream-cert/ca.crt"
        }

        storage "consul" {
          path = "vault/"
          address = "https://consul-server:8501"
          tls_ca_file = "/vault/userconfig/vault-upstream-cert/ca.crt"
        }

        service_registration "kubernetes" {}
  ui:
    enabled: true
  injector:
    enabled: false